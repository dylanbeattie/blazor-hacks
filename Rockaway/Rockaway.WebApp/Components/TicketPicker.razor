@using Rockaway.WebApp.Models
@*

<section class="row">
	<div class="col-4 offset-2">
		<strong>Ticket Type</strong>
	</div>
	<div class="col-2 text-end">
		<strong>Quantity</strong>
	</div>
	<div class="col-2">
		<strong>Price</strong>
	</div>

</section>
@Message
<section class="row">
	@foreach (var tt in Show.TicketTypes) {
		<div class="col-4 offset-2">@tt.Name (@FormatPrice(tt.Price))
			@tt.Id
		</div>
		<div class="col-2">
			<a class="fas fa-circle-minus" @onclick="() => Decrement(tt.Id.ToString())"></a>
			@Quantities[tt.Id]
			<a class="fas fa-circle-plus" @onclick="() => Increment(tt.Id.ToString())"></a>
		</div>
		<div class="col-2 text-end">
		</div>
	}
</section>
<input type="text" name="bonkadonk" value="@Output" />
<input type="submit" />
<button @onclick="Up" class="btn btn-dark">UP</button>
<button @onclick="Down" class="btn btn-dark">DOWN</button>
<br />
<div>@Output</div>

*@

@VenueName<br/>
@ShowDate<br/>
@Show.VenueName<br />
@Show.ShowDate<br />
<hr />
HONK!
   @code {

	// private void Up() => Value++;
	// private void Down() => Value--;
	// [Parameter] public decimal Value { get; set; } = 0m;
	// public string Output => Value.ToString("C", cultureInfo);
	// private readonly CultureInfo cultureInfo = new("da-DK");

	[Parameter] public ShowViewData Show { get; set; }
	[Parameter] public string VenueName { get; set; }
	[Parameter] public DateTime ShowDate { get; set; }
	// public string Message => String.Join(", ", Quantities.Select((id, value) => $"{id}:{value}"));
	// private ShowViewData show = default!;
	// private CultureInfo cultureInfo = CultureInfo.InvariantCulture;
	// public Dictionary<Guid, int> Quantities = new();
	// public void Increment(string ticketTypeId) {
	// 	if (Guid.TryParse(ticketTypeId, out var id)) Quantities[id]++;
	// }

	// public void Decrement(string ticketTypeId) {
	// 	if (Guid.TryParse(ticketTypeId, out var id)) Quantities[id]--;
	// }

	// [Parameter]
	// public ShowViewData Show {
	// 	get => show;
	// 	set {
	// 		show = value;
	// 		if (show.CultureName != cultureInfo.Name) {
	// 			cultureInfo = CultureInfo.CreateSpecificCulture(show.CultureName);
	// 		}
	// 		Quantities = show.TicketTypes.ToDictionary(tt => tt.Id, _ => 0);
	// 	}
	// }
	// private string FormatPrice(decimal price) => price.ToString("C", cultureInfo);
   }